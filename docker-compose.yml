version: "3.9"

networks:
  placeos:
    name: placeos
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.31.231.0/24

volumes:
  elastic-data:
  influx-data:
  nginx-data:
  postgres-data:
  redis-data:
  rethink-data:
  www:

# YAML Anchors

x-deployment-env: &deployment-env
  ENV: ${ENV:-development}
  SG_ENV: ${SG_ENV:-development}
  TZ: $TZ

x-edge-env: &edge-env
  PLACE_EDGE_SECRET: ${PLACE_EDGE_SECRET:-}
  PLACE_URI: ${PLACE_URI:-http://api:3000}

x-jwt-public-key-env: &jwt-public-key-env .env.public_key

x-secret-key-env: &secret-key-env .env.secret_key

x-elastic-client-env: &elastic-client-env
  ELASTIC_HOST: ${ELASTIC_HOST:-elastic}
  ELASTIC_PORT: ${ELASTIC_PORT:-9200}
  ES_HOST: ${ELASTIC_HOST:-elastic}
  ES_PORT: ${ELASTIC_PORT:-9200}

x-etcd-client-env: &etcd-client-env
  ETCD_HOST: ${ETCD_HOST:-etcd}
  ETCD_PORT: ${ETCD_PORT:-2379}

x-influxdb-api-key: &influxdb-api-key .env.influxdb

x-influxdb-client-env: &influxdb-client-env
  INFLUX_BUCKET: ${INFLUX_BUCKET:-place}
  INFLUX_HOST: ${INFLUX_HOST:-http://influxdb:8086}
  INFLUX_ORG: ${INFLUX_ORG:-PlaceOS}

x-place-loader-client-env: &place-loader-client-env
  PLACE_LOADER_URI: ${PLACE_LOADER_URI:-http://frontend-loader:3000}

x-redis-client-env: &redis-client-env
  REDIS_URL: ${REDIS_URL:-redis://redis:6379}

x-rethinkdb-client-env: &rethinkdb-client-env
  RETHINKDB_HOST: ${RETHINKDB_HOST:-rethink}
  RETHINKDB_PORT: ${RETHINKDB_PORT:-28015}
  RETHINKDB_DB: ${RETHINKDB_DB:-place_development}

x-search-ingest-client-env: &search-ingest-client-env
  PLACE_SEARCH_INGEST_URI: ${PLACE_SEARCH_INGEST_URI:-http://search-ingest:3000}
  RUBBER_SOUL_URI: ${RUBBER_SOUL_URI:-http://rubber-soul:3000}

x-search-ingest-service: &search-ingest-service ${PLACE_SEARCH_INGEST_IMAGE:-search-ingest}

x-smtp-client-env: &smtp-client-env
  SMTP_SERVER: ${SMTP_SERVER:-}
  SMTP_PORT: ${SMTP_PORT:-587}
  SMTP_USER: ${SMTP_USER:-} # username if required, will not authenticate if blank
  SMTP_PASS: ${SMTP_PASS:-} # password if required
  SMTP_SECURE: ${SMTP_SECURE:-} # blank for unsecure, `SMTPS` for TLS, `STARTTLS` for negotiating TLS on unsecure connection

x-network: &std-network
  networks:
    placeos:

x-logging: &std-logging
  logging:
    driver: json-file
    options:
      max-size: 99m

services:
  # Services

  api: # Rest API
    image: placeos/rest-api:${PLACE_REST_API_TAG:-nightly}
    restart: always
    container_name: api
    hostname: api
    <<: *std-network
    <<: *std-logging
    depends_on:
      - auth
      - elastic
      - etcd
      - redis
      - rethink
      - search-ingest
    env_file:
      - *jwt-public-key-env
      - *secret-key-env
    environment:
      <<: *deployment-env
      # Service Hosts
      <<: *elastic-client-env
      <<: *etcd-client-env
      <<: *place-loader-client-env
      <<: *redis-client-env
      <<: *rethinkdb-client-env
      <<: *search-ingest-client-env

  auth: # Authentication Service
    image: placeos/auth:${PLACE_AUTH_TAG:-nightly}
    restart: always
    container_name: auth
    hostname: auth
    <<: *std-network
    <<: *std-logging
    depends_on:
      - redis
      - rethink
    env_file:
      - *secret-key-env
    environment:
      <<: *rethinkdb-client-env
      <<: *redis-client-env
      COAUTH_NO_SSL: "true"
      TZ: $TZ
      PLACE_URI: https://${PLACE_DOMAIN:-localhost:8443}

  core: # Module coordinator
    image: placeos/core:${PLACE_CORE_TAG:-nightly}
    restart: always
    container_name: core
    hostname: core
    <<: *std-network
    <<: *std-logging
    depends_on:
      - etcd
      - redis
      - rethink
    env_file:
      - *secret-key-env
    ulimits:
      nofile: 40000
      core:
        soft: 0
        hard: 0
    environment:
      <<: *deployment-env
      # Service Hosts
      <<: *etcd-client-env
      <<: *redis-client-env
      <<: *rethinkdb-client-env

  edge: # Module coordinator
    image: placeos/edge:${PLACE_EDGE_TAG:-nightly}
    restart: "no"
    container_name: edge
    hostname: edge
    <<: *std-network
    <<: *std-logging
    depends_on:
      - core
    environment:
      <<: *deployment-env
      <<: *edge-env

  frontend-loader: # Frontend deployment service
    image: placeos/${PLACE_FRONTEND_LOADER_IMAGE:-frontend-loader}:${PLACE_FRONTEND_LOADER_TAG:-nightly}
    restart: always
    container_name: frontend-loader
    hostname: frontend-loader
    <<: *std-network
    <<: *std-logging
    volumes:
      - type: volume
        source: www
        target: /app/www
    depends_on:
      - rethink
    env_file:
      - *secret-key-env
    environment:
      <<: *deployment-env
        # Service Hosts
      <<: *rethinkdb-client-env
      PLACE_LOADER_WWW: www

  source:
    image: placeos/source:${PLACE_SOURCE_TAG:-nightly}
    profiles:
      - analytics
    restart: always
    container_name: source
    hostname: source
    <<: *std-network
    <<: *std-logging
    depends_on:
      - influxdb
      - redis
      - rethink
    env_file:
      - *influxdb-api-key
      - *secret-key-env
    environment:
      <<: *deployment-env
      # Service Hosts
      <<: *influxdb-client-env
      <<: *redis-client-env
      <<: *rethinkdb-client-env

  triggers: # Conditional execution service
    image: placeos/triggers:${PLACE_TRIGGERS_TAG:-nightly}
    restart: always
    container_name: triggers
    hostname: triggers
    <<: *std-network
    <<: *std-logging
    depends_on:
      - core
      - etcd
      - redis
      - rethink
    env_file:
      - *secret-key-env
    environment:
      <<: *deployment-env
      # Service Hosts
      <<: *etcd-client-env
      <<: *redis-client-env
      <<: *rethinkdb-client-env
      <<: *smtp-client-env

  postgres: # Database used by Staff API
    image: postgres:${POSTGRES_VERSION:-13-alpine}
    container_name: postgres
    hostname: postgres
    restart: unless-stopped
    <<: *std-network
    <<: *std-logging
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      TZ: $TZ
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD

  staff: # Staff API
    image: placeos/staff-api:${PLACE_STAFF_API_TAG:-nightly}
    container_name: staff
    hostname: staff
    restart: unless-stopped
    <<: *std-network
    <<: *std-logging
    depends_on:
      - api
      - postgres
    env_file:
      - *jwt-public-key-env
      - *secret-key-env
    environment:
      <<: *redis-client-env
      SG_ENV: production
      STAFF_TIME_ZONE: $TZ
      PG_DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/placeos"
      PLACE_URI: "https://nginx"
      SSL_VERIFY_NONE: "true"

  # Support

  init:
    image: placeos/init:${PLACE_INIT_TAG:-nightly}
    container_name: init
    restart: on-failure
    <<: *std-network
    <<: *std-logging
    depends_on:
      - rethink
      - search-ingest
    env_file:
      - *secret-key-env
    environment:
      <<: *deployment-env
      # User/Application Configuration
      PLACE_DOMAIN: ${PLACE_DOMAIN:-localhost:8443}
      PLACE_APPLICATION: ${PLACE_APPLICATION:-backoffice}
      PLACE_AUTH_HOST: ${PLACE_AUTH_HOST:-auth:8080}
      PLACE_USERNAME: ${PLACE_USERNAME:-Place Support (localhost:8443)}
      PLACE_EMAIL: ${PLACE_EMAIL:-support@place.tech}
      PLACE_PASSWORD: ${PLACE_PASSWORD:-development}
      PLACE_TLS: "${PLACE_TLS:-true}"
      # Service Hosts
      <<: *rethinkdb-client-env
      <<: *elastic-client-env

  search-ingest: # RethinkDB to Elasticsearch Service
    image: placeos/${PLACE_SEARCH_INGEST_IMAGE:-search-ingest}:${PLACE_SEARCH_INGEST_TAG:-nightly}
    restart: always
    container_name: *search-ingest-service
    hostname: *search-ingest-service
    <<: *std-network
    <<: *std-logging
    depends_on:
      - elastic
      - rethink
    environment:
      <<: *deployment-env
      # Must be specified for `>= 1.2108.0, <= 1.2109.1`
      ES_DISABLE_BULK: "0"
      # Service Hosts
      <<: *rethinkdb-client-env
      <<: *elastic-client-env

  dispatch: # Engine driver server registration and data routing
    image: placeos/dispatch:${PLACE_DISPATCH_TAG:-nightly}
    restart: always
    container_name: dispatch
    hostname: dispatch
    depends_on:
      - nginx
    env_file:
      - *secret-key-env
    <<: *std-network
    <<: *std-logging

  # Resources

  elastic:
    image: amazon/opendistro-for-elasticsearch:${ELASTIC_OD_VERSION:-1.13.2}
    restart: always
    container_name: elastic
    hostname: elastic
    healthcheck:
      test: wget -q --no-verbose --tries=1 --spider http://localhost:9200/_cat/health
      start_period: 1m
    <<: *std-network
    <<: *std-logging
    volumes:
      - type: volume
        source: elastic-data
        target: /usr/share/elasticsearch/data
    environment:
      bootstrap.memory_lock: "true"
      cluster.routing.allocation.disk.threshold_enabled: "false"
      discovery.type: single-node
      TZ: $TZ

  etcd:
    image: bitnami/etcd:${ETCD_VERSION:-3.5.1}
    restart: always
    container_name: etcd
    hostname: etcd
    healthcheck:
      test: etcdctl endpoint health
    <<: *std-network
    <<: *std-logging
    environment:
      ALLOW_NONE_AUTHENTICATION: "yes"
      TZ: $TZ

  influxdb:
    image: influxdb:${INFLUXDB_IMAGE_TAG:-2.0.8-alpine}
    profiles:
      - analytics
    restart: always
    container_name: influx
    hostname: influx
    <<: *std-network
    <<: *std-logging
    healthcheck:
      test: influx bucket list
    volumes:
      - type: volume
        source: influx-data
        target: /root/.influxdbv2
    command: "--reporting-disabled"

  chronograf:
    image: chronograf:${CHRONOGRAF_IMAGE_TAG:-1.9}
    profiles:
      - analytics
    restart: always
    container_name: chronograf
    hostname: chronograf
    <<: *std-network
    <<: *std-logging
    depends_on:
      - influxdb
    env_file:
      - *influxdb-api-key
      - .env.chronograf  # Contains TOKEN_SECRET for OAuth integration
    environment:
      BASE_PATH: /analytics
      INFLUXDB_URL: $INFLUX_HOST
      INFLUXDB_ORG: $INFLUX_ORG
      GENERIC_CLIENT_ID: "COPY_ANALYTICS_CLIENT_ID_FROM_BACKOFFICE"
      GENERIC_CLIENT_SECRET: "COPY_ANALYTICS_CLIENT_SECRET_FROM_BACKOFFICE"
      GENERIC_AUTH_URL: "https://${PLACE_DOMAIN}/auth/oauth/authorize"
      GENERIC_TOKEN_URL: "https://${PLACE_DOMAIN}/auth/oauth/token"
      GENERIC_API_URL: "https://${PLACE_DOMAIN}/api/engine/v2/users/current"
      GENERIC_API_KEY: "email"
      GENERIC_SCOPES: "public"
      GENERIC_NAME: "PlaceOS"
      PUBLIC_URL: "https://${PLACE_DOMAIN}"

  mosquitto:
    image: iegomez/mosquitto-go-auth:${MOSQUITTO_IMAGE_TAG:-latest}
    profiles:
      - analytics
    restart: always
    container_name: mosquitto
    hostname: mosquitto
    <<: *std-network
    <<: *std-logging
    depends_on:
      - nginx
    volumes:
      - ${PWD}/config/mosquitto/mosquitto.conf:/etc/mosquitto/mosquitto.conf
    environment:
      TZ: $TZ

  nginx:
    image: placeos/nginx:${PLACE_NGINX_TAG:-nightly}
    restart: always
    container_name: nginx
    hostname: nginx
    ports:
      - 8080:80
      - 8443:443
    <<: *std-network
    <<: *std-logging
    depends_on:
      - api
      - auth
      - staff
    volumes:
      - type: volume
        source: www
        target: /etc/nginx/html/
        read_only: true
      - type: volume
        source: nginx-data
        target: /etc/nginx/ssl
      - ${PWD}/.htpasswd-kibana:/etc/nginx/.htpasswd-kibana
    env_file:
      - *jwt-public-key-env
      - *influxdb-api-key
    environment:
      TZ: $TZ
      PLACE_DOMAIN: ${PLACE_DOMAIN:-localhost:8443}

  redis:
    image: eqalpha/keydb
    restart: always
    container_name: redis
    hostname: redis
    healthcheck:
      test: redis-cli ping
    <<: *std-network
    <<: *std-logging
    volumes:
      - type: volume
        source: redis-data
        target: /data
    environment:
      TZ: $TZ

  rethink:
    image: rethinkdb:${RETHINKDB_VERSION:-2.4}
    restart: always
    container_name: rethink
    hostname: rethink
    healthcheck:
      # Check if the DB's port is open
      test: "bash -c ': &>/dev/null </dev/tcp/127.0.0.1/28015'"
    <<: *std-network
    <<: *std-logging
    volumes:
      - type: volume
        source: rethink-data
        target: /data/rethinkdb_data
    environment:
      TZ: $TZ

  # Aggregates logs and forwards them to Elasticsearch.
  logstash:
    image: blacktop/logstash:${ELASTIC_VERSION:-7.10.2}
    profiles:
      - kibana
    restart: always
    container_name: logstash
    hostname: logstash
    << : *std-network
    << : *std-logging
    depends_on:
      - elastic
      - validate-logstash-config
    volumes:
      - ${PWD}/config/logstash/config:/config
      - ${PWD}/config/logstash/patterns:/opt/logstash/extra_patterns
    command: logstash -f /config

  # Run 'docker-compose run --rm validate-logstash-config' to quickly check the logstash config.
  validate-logstash-config:
    image: blacktop/logstash:${ELASTIC_VERSION:-7.10.2}
    profiles:
      - kibana
    restart: "no"
    container_name: validate-logstash
    << : *std-network
    << : *std-logging
    volumes:
      - ${PWD}/config/logstash/config:/config
    command: logstash -t -f /config

  # Sends all container json-file logs to logstash
  logspout:
    image: vincit/logspout-gelf:3.2.6-alpine
    profiles:
      - kibana
    restart: unless-stopped
    container_name: logspout
    hostname: logspout
    << : *std-network
    << : *std-logging
    depends_on:
      - logstash
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: gelf://${LOGSTASH_HOST}:${LOGSTASH_PORT}

  kibana:
    image: amazon/opendistro-for-elasticsearch-kibana:${ELASTIC_OD_VERSION:-1.13.2}
    profiles:
      - kibana
    restart: always
    container_name: kibana
    hostname: kibana
    << : *std-network
    << : *std-logging
    depends_on:
      - elastic
    environment:
      <<: *elastic-client-env
      NODE_OPTIONS: "--max-old-space-size=200" # fixes memory leak (https://github.com/elastic/kibana/issues/5170)
      HTTPS_METHOD: "nohttp"
      ELASTICSEARCH_HOSTS: "http://${ELASTIC_HOST}:${ELASTIC_PORT}"
      SERVER_BASEPATH: "/${PLACE_METRICS_ROUTE}"
      SERVER_REWRITEBASEPATH: "true"
      SERVER_PUBLICBASEURL: "https://${PLACE_DOMAIN}/${PLACE_METRICS_ROUTE}"

  # Takes care of piling up Elasticsearch indices/logs. Can do many other things as well.
  # Set up a cron job that runs "docker-compose run --rm curator --config /config.yml /action-file.yml" every once in a while.
  curator:
    image: bobrik/curator:5.8.1
    profiles:
      - kibana
    container_name: curator
    hostname: curator
    << : *std-network
    << : *std-logging
    depends_on:
      - elastic
    volumes:
      - ${PWD}/config/curator/action-file.yml:/action-file.yml
      - ${PWD}/config/curator/config.yml:/config.yml

  # Gets metrics from host machine and send to elastic
  metricbeat:
    image: elastic/metricbeat:${ELASTIC_VERSION:-7.10.2}
    profiles:
      - metricbeat
    restart: unless-stopped
    container_name: metricbeat
    hostname: metricbeat
    user: root
    << : *std-network
    << : *std-logging
    depends_on:
      - elastic
    environment:
      <<: *elastic-client-env
    volumes:
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${PWD}/config/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
    cap_add:
      - SYS_PTRACE
      - DAC_READ_SEARCH
    command: ["metricbeat", "-e", "--strict.perms=false", "-system.hostfs=/hostfs", "-E", "output.elasticsearch.hosts=[$ELASTIC_HOST:$ELASTIC_PORT]"]
