#! /usr/bin/env bash
# shellcheck disable=1003,1090

banner() (
    echo
    echo '░░░░░░░\  ░░\                                ░░░░░░\   ░░░░░░\'
    echo '░░  __░░\ ░░ |                              ░░  __░░\ ░░  __░░\'
    echo '░░ |  ░░ |░░ | ░░░░░░\   ░░░░░░░\  ░░░░░░\  ░░ /  ░░ |░░ /  \__|'
    echo '░░░░░░░  |░░ | \____░░\ ░░  _____|░░  __░░\ ░░ |  ░░ |\░░░░░░\'
    echo '░░  ____/ ░░ | ░░░░░░░ |░░ /      ░░░░░░░░ |░░ |  ░░ | \____░░\'
    echo '░░ |      ░░ |░░  __░░ |░░ |      ░░   ____|░░ |  ░░ |░░\   ░░ |'
    echo '░░ |      ░░ |\░░░░░░░ |\░░░░░░░\ \░░░░░░░\  ░░░░░░  |\░░░░░░  |'
    echo '\__|      \__| \_______| \_______| \_______| \______/  \______/'
    echo
)

# This functions mutates the outer scope, hence {} are used
load_environment() {
    # Save the existing environment
    ext_env=$(mktemp)
    export -p >"${ext_env}"
    set -o allexport

    # Load contents of .env
    . "${base_path}/.env"

    # Overlay the existing environment
    . "${ext_env}"

    # Conditional config for backwards compat
    if [[ $PLACEOS_TAG =~ ^placeos-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then

        if [[ $PLACEOS_TAG < "placeos-1.2108.2" ]]; then
            PLACE_STAFF_API_TAG="nightly"
            PLACE_NGINX_TAG="staff-api"
        fi

        if [[ $PLACEOS_TAG < "placeos-1.2109.0" ]]; then
            PLACE_FRONTEND_LOADER_IMAGE="frontends"
        fi

        if [[ $PLACEOS_TAG < "placeos-1.2111.0" ]]; then
            PLACE_SEARCH_INGEST_IMAGE="rubber-soul"
        fi
    fi

    # Cleanup
    set +o allexport
    rm "${ext_env}"
    unset ext_env
}

# The bash hail mary (exit on failure, unset variables, fail pipe composition early)
set -euo pipefail

# Kill child processes on signals
trap 'tput cnorm; pkill -P $$;' SIGINT SIGTERM

# Colours
red='\033[0;31m'
green='\033[0;32m'
reset='\033[0m'

# Whether to write to STDOUT or not
VERBOSE="false"

# Path of directory containing the script
base_path="$(dirname "${0}")"

# Terminal spinner
source "${base_path}/scripts/spinner.sh"

# Create a logfile
mkdir -p "${base_path}/.logs"
logfile="${base_path}/.logs/$(date +"%Y%m%d%H%M").log"

COMPOSE_PROJECT_NAME=placeos

# Helpers
###################################################################################################

PROMPT="░░░"

unknown_argument() (
    unknown_arg="${1}"
    usage="${2}"
    [ -n "${unknown_arg}" ] && prompt "${red}Unknown option:${reset} ${unknown_arg}"
    eval "${usage}"
    exit 1
)

prompt() (
    echo -e "${PROMPT} ${1}"
)

abort() (
    prompt "${red}${1}${reset}"
    prompt "Logs can be found in ${logfile}"
    exit 1
)

run_or_abort() {
    task="${1}"
    start="${2}"
    failure="${3}"
    ignore_failure="${4-"false"}"

    exit_code=0
    if [ "${VERBOSE}" == "false" ]; then
        start_spinner "${PROMPT} ${start}"
        eval "${task} >>${logfile} 2>&1" || exit_code=$?
        stop_spinner $exit_code
    else
        prompt "${start}"
        eval "${task} 2>&1 | tee -a ${logfile}" || exit_code=$?
    fi

    if [ "$ignore_failure" != "true" ]; then
        [ $exit_code -eq 0 ] || abort "${failure:-"${task} failed with ${exit_code}"}"
    fi
}

# Start
###################################################################################################

hard_reset() (
    # TODO: drop influxdb tables
    # TODO: clear redis

    run_or_abort \
        "${base_path}/scripts/run-sam-task drop:db" \
        "Dropping RethinkDB tables..." \
        "Failed to drop RethinkDB tables."

    run_or_abort \
        "${base_path}/scripts/run-sam-task drop:elastic" \
        "Dropping Elasticsearch indices..." \
        "Failed to drop Elasticsearch indices."

    run_or_abort \
        'docker-compose restart nginx' \
        "Restarting nginx..." \
        "Failed to restart nginx."
)

start_environment__usage() (
    cat <<EOF
Usage: ./placeos start [-h|--help]

Start the PlaceOS environment.

Arguments:
    --hard-reset            Reset the environment to a default state.
    --email EMAIL           Email to setup an admin account for. [default: support@place.tech]
    --password PASSWORD     Password for created admin account. [default: development]
    --domain DOMAIN         Domain to configure. [default: localhost:8443]
    --application APP       Application to configure. [default: backoffice]
    --analytics             Set-up analytics stack, including MQTT & InfluxDB & Chronograf
    --kibana                Set-up Kibana and Elastic stack.
    -v, --verbose           Write logs to STDOUT in addition to the log file.
    -h, --help              Display this message.
EOF
)

start_environment() (
    PROFILES=""
    hard_reset=false
    enable_analytics=false
    enable_kibana=false
    email_argument=""
    password_argument=""
    domain_argument=""
    application_argument=""
    while [ ${#} -gt 0 ]; do
        command="${1}"
        shift
        case ${command} in
        --hard-reset)
            read -rp "${PROMPT} $(echo -e "${red}Warning:${reset}") This will reset your environment. Would you like to continue (y/n)? " choice
            case "${choice}" in
            y | Y | YES | yes)
                hard_reset=true
                ;;
            *)
                abort "Exiting."
                ;;
            esac
            ;;
        --email)
            email_argument="${1}"
            shift
            ;;
        --password)
            password_argument="${1}"
            shift
            ;;
        --domain)
            domain_argument="${1}"
            shift
            ;;
        --application)
            application_arguement="${1}"
            shift
            ;;
        --analytics)
            enable_analytics=true
            ;;
        --kibana)
            enable_kibana=true
            ;;
        -v | --verbose)
            VERBOSE="true"
            ;;
        -h | --help | help)
            start_environment__usage
            exit 0
            ;;
        *)
            unknown_argument "${command}" "start_environment__usage"
            ;;
        esac
    done

    banner

    load_environment

    prompt "Starting PlaceOS <${PLACEOS_TAG}>"

    [ $VERBOSE == "false" ] && prompt "For detailed logging, run \`tail -f ${logfile}\`"

    EMAIL_ENV="${base_path}/.env.email"

    set -a
    if [ -f "${EMAIL_ENV}" ]; then
        . "${EMAIL_ENV}"
    elif [ -n "${email_argument}" ]; then
        # Override env with CLI arguments
        PLACE_EMAIL=${email_argument}
        # Write the email so as to not prompt the user again.
        echo "PLACE_EMAIL=${PLACE_EMAIL}" >"${EMAIL_ENV}"
    fi
    set +a

    if [ -n "${password_argument}" ]; then
        PLACE_PASSWORD=${password_argument}
    fi

    if [ -n "${domain_argument}" ]; then
        PLACE_DOMAIN=${domain_argument}
    fi

    if [ -n "${application_argument}" ]; then
        PLACE_APPLICATION=${application_argument}
    fi

    # Attempt to set the username to that in git config if username not in env
    if [ -z ${PLACE_USERNAME+x} ]; then
        PLACE_USERNAME=${PLACE_USERNAME:-"$(git config user.name 2>/dev/null || exit 0)"}
        PLACE_USERNAME=${PLACE_USERNAME:-"Place Support"}
    fi

    # Prompt the user for their email if not already set via `.env` or argument
    if [ -z ${PLACE_EMAIL+x} ]; then
        PLACE_EMAIL=${PLACE_EMAIL:-"$(git config user.email 2>/dev/null || exit 0)"}
        PLACE_EMAIL=${PLACE_EMAIL:-"support@place.tech"}

        read -rp "${PROMPT} Please enter an email ($(echo -e "${green}default:${reset}") ${PLACE_EMAIL}): " choice
        if [ -n "${choice}" ]; then
            PLACE_EMAIL=${choice}
        fi
    fi

    # Prompt the user for their password if not already set via `.env`
    # TODO: Check for the user before asking for a password
    # TODO: Autogenerate the default password
    while [ -z ${PLACE_PASSWORD+x} ]; do
        read -srp "${PROMPT} Please enter a password: " choice
        PLACE_PASSWORD="${choice}"
        # Newline after response
        echo ""
    done

    # Write the email so as to not prompt the user again.
    echo "PLACE_EMAIL=${PLACE_EMAIL}" >"${EMAIL_ENV}"
    # TODO: use init check instead of writing the password.
    echo "PLACE_PASSWORD=${PLACE_PASSWORD}" >>"${EMAIL_ENV}"

    if [[ $ENABLE_ANALYTICS == "true" ]] || [[ $enable_analytics == "true" ]]; then
        PROFILES+=" --profile analytics"
    fi

    if [[ -d "${base_path}/.htpasswd-kibana" ]]; then
        prompt "Detected malformed auth file. Cleaning up"
        rm -r "${base_path}/.htpasswd-kibana"
    fi

    if [[ $ENABLE_KIBANA == "true" ]] || [[ $enable_kibana == "true" ]]; then
        PROFILES+=" --profile kibana"
        if [[ $(uname) == "Linux" ]]; then
            PROFILES+=" --profile metricbeat"
        fi
    fi

    run_or_abort \
        "${base_path}/scripts/generate-secrets" \
        "Generating secrets..." \
        "Failed to generate secrets."

    run_or_abort \
        "docker-compose ${PROFILES} pull -q" \
        "Pulling images..." \
        "Failed to pull images."

    run_or_abort \
        "docker-compose ${PROFILES} up -d" \
        "Bringing up services..." \
        "Failed to start services."

    if [[ $PROFILES == *"analytics"* ]]; then
        run_or_abort \
            "${base_path}/scripts/init-influxdb" \
            "Configuring InfluxDB..." \
            "Failed to configure InfluxDB."
    fi

    [ ${hard_reset} == "true" ] && hard_reset

    run_or_abort \
        "${base_path}/scripts/run-init-container" \
        "Initialising PlaceOS with default domain ($PLACE_DOMAIN)..." \
        "Failed to create user entity."

    prompt "PlaceOS initialised. Login to https://$PLACE_DOMAIN/backoffice/ with..."
    prompt "$PLACE_EMAIL:$PLACE_PASSWORD"
)

# Stop
###################################################################################################

stop_environment__usage() (
    cat <<EOF
Usage: ./placeos stop [-h|--help]

Stop the PlaceOS environment.

Arguments:
    -v, --verbose           Write logs to STDOUT in addition to the log file.
    -h, --help              Display this message.
EOF
)

stop_environment() (
    while [ ${#} -gt 0 ]; do
        command="${1}"
        shift
        case ${command} in
        -h | --help | help)
            stop_environment__usage
            exit 0
            ;;
        -v | --verbose)
            VERBOSE="true"
            ;;
        *)
            unknown_argument "${command}" "stop_environment__usage"
            ;;
        esac
    done

    run_or_abort \
        "docker-compose down --remove-orphans" \
        "Tearing down PlaceOS" \
        "Failed to teardown PlaceOS"
)

# Task
###################################################################################################

task__usage() (
    cat <<EOF
Usage: ./placeos task [-h|--help|help] [-t|--task] <task> [help|...] [arguments...]

Run a task in the PlaceOS environment.

Arguments:
    -h, --help              Display this message.
    -t, ---tasks            Display list of available tasks.
EOF
)

task() (
    load_environment

    PARAMS=""
    while [ ${#} -gt 0 ]; do
        command="${1}"
        shift
        case ${command} in
        -h | --help)
            task__usage
            exit 0
            ;;
        -t | --tasks)
            ./scripts/run-sam-task help
            exit 0
            ;;
        *)
            PARAMS="${PARAMS} ${command}"
            shift
            ;;
        esac
    done

    # Print help when no task passed
    if [[ -z ${PARAMS} ]]; then
        ./scripts/run-sam-task help
        exit 0
    fi

    ./scripts/run-sam-task ${PARAMS}
)

# Update
###################################################################################################

PLACEOS_RELEASE_REPO="PlaceOS/PlaceOS"

CALVER_FULL_REGEX='[0-9]+\.[0-9]{4}\.[0-9]+(-rc[0-9]+)?'
CALVER_MONTH_REGEX='[0-9]+\.[0-9]{4}'
VERSION_CHANNEL_REGEX='(nightly|preview|latest)'

fetch_release_tags() (
    git ls-remote https://github.com/${PLACEOS_RELEASE_REPO} |
        cut -f2 |
        grep '^refs/tags/' |
        cut -d'/' -f3 |
        sort --version-sort --reverse |
        sed -E "s/($CALVER_FULL_REGEX|$CALVER_MONTH_REGEX)/placeos-\1/g"
)

# TODO: Change to `release` once the flow has been established
RELEASE_BRANCH="nightly"

# If called without a version, fetches latest.
# Otherwise fetches notes for passed version
changelog() (
    temporary_changelog="$(mktemp -d)/CHANGELOG.md"

    curl \
        --silent \
        --location \
        --proto-redir -all,https \
        "https://raw.githubusercontent.com/${PLACEOS_RELEASE_REPO}/${RELEASE_BRANCH}/CHANGELOG.md" >"$temporary_changelog"

    if [[ $# = 1 ]]; then
        version=$(sed -E 's/placeos-//g' <<<"$1")
        version_header="$(grep --extended-regexp "^## ${version}$" "$temporary_changelog" | head -1)"

        # Check version is present in changelog
        if [[ ! $version_header ]]; then
            prompt "${red}${version} not found in CHANGELOG${reset}"
            return
        fi

        # Remove lines before the version header (simplifies range below)
        sed -i '.bak' -n "/^${version_header}$/,\$p" "$temporary_changelog"
    else
        # Extract the latest version
        version_header="$(grep --extended-regexp "^## ${CALVER_FULL_REGEX}$" "$temporary_changelog" | head -1)"
        version=$(echo "${version_header}" | sed -E 's/^## (.*)$/\1/')
    fi

    previous_version_header="$(grep --extended-regexp "^## ${CALVER_FULL_REGEX}$" "$temporary_changelog" | head -2 | tail -1)"

    # Create a URL that directs to the header of the version in the CHANGELOG
    anchor="$(echo "$version_header" | tr -d "[:blank:]" | tr -d '.#')"
    changelog_uri="https://github.com/${PLACEOS_RELEASE_REPO}/blob/${RELEASE_BRANCH}/CHANGELOG.md#${anchor}"

    prompt "${green}Changelog for $version${reset}"
    echo ""
    echo "For the full PlaceOS release notes, see ${changelog_uri}"
    sed -E "/^$version_header/,/^$previous_version_header$/!d;//d" "$temporary_changelog"
)

update_environment__usage() (
    cat <<EOF
Usage: ./placeos update [-h|--help] [VERSION]

Modifies PLACEOS_TAG to the selected PlaceOS platform version.
If VERSION is omitted, defaults to the most recent stable version.

Arguments:
    --list                  List the available versions.
    -v, --verbose           Write logs to STDOUT in addition to the log file.
    -h, --help              Display this message.
EOF
)

update_environment() (
    version=""
    while [ ${#} -gt 0 ]; do
        command="${1}"
        shift
        case ${command} in
        -h | --help | help)
            update_environment__usage
            exit 0
            ;;
        --list)
            fetch_release_tags
            exit 0
            ;;
        -v | --verbose)
            VERBOSE="true"
            ;;
        -*)
            unknown_argument "${command}" "update_environment__usage"
            ;;
        *)
            version="$command"
            [[ ${#} = 0 ]] || abort "Expected a single VERSION argument."
            break
            ;;
        esac
    done

    tags=$(fetch_release_tags)

    if [[ -z "$version" ]]; then
        version=$(echo "$tags" | grep -Ev "$VERSION_CHANNEL_REGEX" | head -1)
    fi

    # shellcheck disable=2076
    if [[ -z "$(grep -E "$CALVER_FULL_REGEX|$CALVER_MONTH_REGEX|$VERSION_CHANNEL_REGEX" <<< $version)" ]]; then
        prompt "Valid versions are...\n\n$tags\n"
        abort "${version} is not a valid version."
    fi

    run_or_abort \
        "sed -i '.bak' -E 's/^PLACEOS_TAG=.*$/PLACEOS_TAG=\${PLACEOS_TAG:-${version}}/g' '.env'" \
        "Updating to ${version}" \
        "Failed to update to ${version}"

    changelog ${version}
)

# Upgrade
###################################################################################################

PARTNER_ENV_REPO="place-labs/partner-environment"

fetch_environment_tags() (
    git ls-remote https://github.com/${PARTNER_ENV_REPO} |
        cut -f2 |
        grep -E '^refs/tags/|HEAD' |
        cut -d'/' -f3 |
        sort --version-sort --reverse
)

upgrade_environment__usage() (
    cat <<EOF
Usage: ./placeos upgrade [-h|--help] [VERSION]

Upgrades the PlaceOS Partner Environment.
If VERSION is omitted, defaults to the latest version.

Arguments:
    --list                  Lists versions of the Partner Environment.
    -v, --verbose           Write logs to STDOUT in addition to the log file.
    -h, --help              Display this message.
EOF
)

upgrade_environment() (
    version=""
    tags="$(fetch_environment_tags)"

    while [ ${#} -gt 0 ]; do
        command="${1}"
        shift
        case ${command} in
        -h | --help | help)
            upgrade_environment__usage
            exit 0
            ;;
        --list)
            echo "$tags"
            exit 0
            ;;
        -v | --verbose)
            VERBOSE="true"
            ;;
        -*)
            unknown_argument "${command}" "upgrade_environment__usage"
            ;;
        *)
            version="$command"
            [[ ${#} = 0 ]] || abort "Expected a single VERSION argument."
            break
            ;;
        esac
    done

    # shellcheck disable=2076
    if [[ ! " $tags " =~ " $version " ]]; then
        prompt "Valid versions are...\n\n$tags\n"
        abort "$version is not a valid version."
    fi

    # Set git-config values known to fix git errors
    # Line endings
    git config --local core.eol lf
    git config --local core.autocrlf false

    # zeroPaddedFilemode fsck errors
    git config --local fsck.zeroPaddedFilemode ignore
    git config --local fetch.fsck.zeroPaddedFilemode ignore
    git config --local receive.fsck.zeroPaddedFilemode ignore

    last_commit=$(git rev-parse "$version")

    run_or_abort \
        "git pull --autostash --quiet --rebase origin $version" \
        "Upgrading PlaceOS Partner Environment..." \
        "Failed to upgrade PlaceOS Partner Environment"

    # Check if it was really updated or not
    if [[ "$(git rev-parse HEAD)" = "$last_commit" ]]; then
        prompt "PlaceOS Partner Environment is already at $version"
    else
        prompt "PlaceOS Partner Environment is now at $version"
    fi
)

# Root Command
###################################################################################################

usage() (
    cat <<EOF
Usage: ./placeos [-h|--help] [command]

Helper script for interfacing with the PlaceOS Partner Environment.

Command:
    start                   Start the environment.
    stop                    Stops the environment.
    update                  Update the platform version.
    upgrade                 Upgrade the Partner Environment.
    task                    Runs a task in the environment.
    help                    Display this message.

Arguments:
    -h, --help              Display this message.
EOF
)

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

command="$1"
shift
case $command in
start)
    start_environment "$@"
    ;;
stop)
    stop_environment "$@"
    ;;
update)
    update_environment "$@"
    ;;
upgrade)
    upgrade_environment "$@"
    ;;
task)
    task "$@"
    ;;
-h | --help | help)
    usage
    ;;
*)
    unknown_argument "${command}" "usage"
    ;;
esac
